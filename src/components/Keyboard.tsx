'use client';
import React, { useState, useEffect, useRef } from 'react';

interface CustomKeyboardProps {
  onValueChange?: (value: string) => void;
}

const EN_LAYOUT = [
  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
  ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],
  ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],
  ['z', 'x', 'c', 'v', 'b'],
  ['n', 'm', '…ô', '√ß', 'ƒü'],
  ['ƒ±', '√∂', '≈ü', '√º', 'o‚Äò', 'g‚Äò', 'sh', 'ch'],
];

const RU_LAYOUT = [
  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
  ['–π', '—Ü', '—É', '–∫', '–µ', '–Ω', '–≥', '—à', '—â', '–∑'],
  ['—Ñ', '—ã', '–≤', '–∞', '–ø', '—Ä', '–æ', '–ª', '–¥'],
  ['—è', '—á', '—Å', '–º', '–∏', '—Ç', '—å', '”ô', '“ì'],
  ['“õ', '“£', '”©', '“±', '“Ø', '—ñ', '—ó', '“ª'],
];

const runicMap: Record<string, string> = {
  a: 'ê∞Ä',
  e: 'ê∞Ä',
  √§: 'ê∞Ä',
  o: 'ê∞Ü',
  u: 'ê∞Ü',
  √∂: 'ê∞á',
  √º: 'ê∞á',
  ƒ±: 'ê∞É',
  i: 'ê∞É',
  b: 'ê∞â',
  v: 'ê∞â',
  p: 'ê∞Ø',
  t: 'ê±Ö',
  d: 'ê±Ö',
  k: 'ê∞¥',
  q: 'ê∞¥',
  g: 'ê∞ç',
  ƒü: 'ê∞ç',
  m: 'ê∞¢',
  n: 'ê∞§',
  √±: 'ê∞≠',
  l: 'ê∞†',
  r: 'ê∞º',
  s: 'ê∞Ω',
  z: 'ê∞î',
  √ß: 'ê∞≤',
  ≈ü: 'ê∞≥',
  y: 'ê∞ñ',
  h: 'ê∞¥',
  …ô: 'ê∞Ä',
  'o‚Äò': 'ê∞Ü',
  'g‚Äò': 'ê∞ç',
  sh: 'ê∞≥',
  ch: 'ê∞≤',
  ”ô: 'ê∞Ä',
  “ì: 'ê∞ç',
  “õ: 'ê∞¥',
  “£: 'ê∞≠',
  ”©: 'ê∞á',
  “±: 'ê∞Ü',
  “Ø: 'ê∞á',
  —ñ: 'ê∞É',
  –π: 'ê∞ñ',
  —Ü: 'ê∞≤',
  —É: 'ê∞Ü',
  –∫: 'ê∞¥',
  –µ: 'ê∞Ä',
  –Ω: 'ê∞§',
  –≥: 'ê∞ç',
  —à: 'ê∞≥',
  —â: 'ê∞≥',
  –∑: 'ê∞î',
  —Ñ: 'ê∞Ø',
  —ã: 'ê∞É',
  –≤: 'ê∞â',
  –∞: 'ê∞Ä',
  –ø: 'ê∞Ø',
  —Ä: 'ê∞º',
  –æ: 'ê∞Ü',
  –ª: 'ê∞†',
  –¥: 'ê±Ö',
  –∂: 'ê∞≤',
  —ç: 'ê∞Ä',
  —è: 'ê∞Äê∞ñ',
  —á: 'ê∞≤',
  —Å: 'ê∞Ω',
  –º: 'ê∞¢',
  –∏: 'ê∞É',
  —Ç: 'ê±Ö',
  —å: '',
  “≥: 'ê∞¥',
  —ó: 'ê∞É',
  ≈ã: 'ê∞≠',
  ≈ãg: 'ê∞≠ê∞ç',
  d≈æ: 'ê∞≤',
  nd: 'ê∞§ê±Ö',
  nt: 'ê∞§ê±Ö',
  ld: 'ê∞†ê±Ö',
  lt: 'ê∞†ê±Ö',
  ny: 'ê∞≠ê∞ñ',
  n√ß: 'ê∞≠ê∞≤',
};
const transliterateToRunic = (input: string): string => {
  return input
    .split('')
    .map((char) => runicMap[char.toLowerCase()] || char)
    .join('');
};

const reverseRunicMap: Record<string, { en: string; ru: string }> = {
  'ê∞Ä': { en: 'a', ru: '–∞' },
  'ê∞É': { en: 'i', ru: '–∏' },
  'ê∞Ü': { en: 'o', ru: '–æ' },
  'ê∞á': { en: '√∂', ru: '”©' },
  'ê∞â': { en: 'b', ru: '–±' },
  'ê∞Ø': { en: 'p', ru: '–ø' },
  'ê±Ö': { en: 't', ru: '—Ç' },
  'ê∞¥': { en: 'k', ru: '–∫' },
  'ê∞ç': { en: 'g', ru: '–≥' },
  'ê∞¢': { en: 'm', ru: '–º' },
  'ê∞§': { en: 'n', ru: '–Ω' },
  'ê∞≠': { en: '√±', ru: '“£' },
  'ê∞†': { en: 'l', ru: '–ª' },
  'ê∞º': { en: 'r', ru: '—Ä' },
  'ê∞Ω': { en: 's', ru: '—Å' },
  'ê∞î': { en: 'z', ru: '–∑' },
  'ê∞≤': { en: 'ch', ru: '—á' },
  'ê∞≥': { en: 'sh', ru: '—à' },
  'ê∞ñ': { en: 'y', ru: '–π' },
};

const transliterateFromRunic = (input: string, layout: string): string => {
  return input
    .split('')
    .map((char) => {
      const mapping = reverseRunicMap[char];
      if (!mapping) return char;
      return layout === 'EN' ? mapping.en : mapping.ru;
    })
    .join('');
};

const CustomKeyboard: React.FC<CustomKeyboardProps> = ({ onValueChange }) => {
  const [inputValue, setInputValue] = useState('');
  const [layout, setLayout] = useState('EN');
  const inputRef = useRef<HTMLTextAreaElement>(null);

  const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {
    e.preventDefault();
    const pastedText = e.clipboardData.getData('text');
    const newValue = inputValue + pastedText;
    setInputValue(newValue);
    onValueChange?.(newValue);
  };

  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    onValueChange?.(newValue);
  };

  const handleKeyPress = (key: string) => {
    let newValue = inputValue;
    if (key === 'bksp') {
      newValue = inputValue.slice(0, -1);
    } else if (key === 'space') {
      newValue = inputValue + ' ';
    } else {
      newValue = inputValue + key;
    }
    setInputValue(newValue);
    onValueChange?.(newValue);
  };

  const toggleLayout = () => {
    setLayout(layout === 'EN' ? 'RU' : 'EN');
  };

  const currentLayout = layout === 'EN' ? EN_LAYOUT : RU_LAYOUT;

  return (
    <>
      <div className="relative w-full flex flex-col gap-5">
        <button
          onClick={toggleLayout}
          className="px-4 py-2 w-fit bg-blue-600 text-white rounded-lg hover:bg-blue-500"
        >
          Switch to {layout === 'EN' ? 'Cirilic' : 'Latinic'}
        </button>
        <div className="flex flex-col gap-5 md:flex-row justify-between w-full">
          <div className="w-full md:pr-10">
            <textarea
              ref={inputRef}
              value={transliterateFromRunic(
                transliterateToRunic(inputValue),
                layout
              )}
              placeholder="...ê∞¢ê∞Üê∞§ê±Öê∞Ä ê±Öê∞Äê∞ºê∞Éê∞≠ê∞Éê∞î"
              onChange={handleChange}
              onPaste={handlePaste}
              rows={4}
              className="w-full p-2 bg-transparent text-2xl text-end text-white rounded-lg md:mb-4 focus:outline-none"
            />
          </div>

          <div className="w-full border-t md:border-t-0 pt-5 md:pt-0 md:border-l md:pl-10">
            <textarea
              ref={inputRef}
              value={inputValue}
              placeholder="Type here..."
              onChange={handleChange}
              onPaste={handlePaste}
              rows={4}
              className="w-full p-2 bg-transparent text-2xl text-white rounded-lg mb-4 focus:outline-none"
            />
          </div>
        </div>
      </div>
      <div className="grid grid-cols-6 md:grid-cols-10 w-full gap-2 mt-4">
        {currentLayout.flat().map((key: string, idx: number) => (
          <button
            key={idx}
            className="p-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700"
            onClick={() => handleKeyPress(key)}
          >
            {key}
          </button>
        ))}
        <button
          className="col-span-4 md:col-span-7 p-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700"
          onClick={() => handleKeyPress('space')}
        >
          space
        </button>
        <button
          className="col-span-2 md:col-span-3 p-2 bg-red-600 text-white rounded-lg hover:bg-red-500"
          onClick={() => handleKeyPress('bksp')}
        >
          ‚å´
        </button>
      </div>
    </>
  );
};

export default CustomKeyboard;
